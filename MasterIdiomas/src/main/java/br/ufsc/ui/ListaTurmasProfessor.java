package br.ufsc.ui;

import br.ufsc.constant.Autoridade;
import br.ufsc.control.EstudanteController;
import br.ufsc.control.ProfessorController;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.*;

public class ListaTurmasProfessor extends javax.swing.JFrame {

    /**
     * Creates new form TurmaForm
     */
    public ListaTurmasProfessor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProfessores = new JTable(new DefaultTableModel());
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bBuscarProfessores = new javax.swing.JButton();
        bBuscarTurmas = new javax.swing.JButton();
        bBuscarEstudantes = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaTurmas = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listagem de Professores, Turmas e Estudantes");
        setResizable(false);

        jLabel4.setText("Professores (as)");

        tabelaProfessores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "NOME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProfessores.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaProfessores);

        jLabel5.setText("Turmas");

        jLabel1.setText("Estudantes");

        bBuscarProfessores.setText("Buscar Professores");
        bBuscarProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarProfessoresActionPerformed(evt);
            }
        });

        bBuscarTurmas.setText("Buscar Turmas");
        bBuscarTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarTurmasActionPerformed(evt);
            }
        });

        bBuscarEstudantes.setText("Buscar Estudantes");
        bBuscarEstudantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarEstudantesActionPerformed(evt);
            }
        });

        tabelaTurmas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Turma", "Blocos de Horários", "Idioma", "Nível"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaTurmas.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tabelaTurmas);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "NOME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(bBuscarProfessores, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(bBuscarTurmas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarEstudantes, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBuscarTurmas)
                    .addComponent(bBuscarEstudantes)
                    .addComponent(bBuscarProfessores))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bBuscarProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarProfessoresActionPerformed
        if (callerType.equals(Autoridade.ADMIN)) {
            buscarProfessores();
        } else if (callerType.equals(Autoridade.PROFESSOR)) {
            buscarProfessor(cpf);
        }
    }//GEN-LAST:event_bBuscarProfessoresActionPerformed

    private void buscarProfessores() {
        ProfessorController pc = new ProfessorController();
        ArrayList<String[]> professores = pc.getProfessores();
        getTabelaProfessores().getDataVector().removeAllElements();
        getTabelaProfessores().fireTableDataChanged();
        for (Object[] professor : professores) {
            setRowTabelaProfessores(professor);
        }
        pc = null;
    }

    private void buscarProfessor(String cpf) {
        ProfessorController pc = new ProfessorController();
        ArrayList<String[]> professores = pc.getProfessor(cpf);
        getTabelaProfessores().getDataVector().removeAllElements();
        getTabelaProfessores().fireTableDataChanged();
        for (Object[] professor : professores) {
            setRowTabelaProfessores(professor);
        }
        pc = null;
    }

    private void bBuscarTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarTurmasActionPerformed
        int row = tabelaProfessores.getSelectedRow();
        if (row > -1) {
            tabelaProfessores.setRowSelectionInterval(row, row);
            String cpf = getTabelaProfessores().getValueAt(row, 0).toString();
            ProfessorController pc = new ProfessorController();
            ArrayList<String[]> turmas = pc.getTurmasProfessorByCpf(cpf);
            getTabelaTurmas().getDataVector().removeAllElements();
            getTabelaTurmas().fireTableDataChanged();
            for (Object[] turma : turmas) {
                setRowTabelaTurmas(turma);
            }
            pc = null;
        }
    }//GEN-LAST:event_bBuscarTurmasActionPerformed

    private void bBuscarEstudantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarEstudantesActionPerformed
        int row = tabelaTurmas.getSelectedRow();
        if (row > -1) {
            tabelaTurmas.setRowSelectionInterval(row, row);
            EstudanteController ec = new EstudanteController();
            Integer id = Integer.valueOf(getTabelaTurmas().getValueAt(row, 0).toString());
            ArrayList<String[]> estudantes = ec.getEstudantesMatriculados(id);
            getTabelaEstudantes().getDataVector().removeAllElements();
            getTabelaEstudantes().fireTableDataChanged();
            for (String[] estudante : estudantes) {
                setRowTabelaEstudantes(estudante);
            }
            ec = null;
        }
    }//GEN-LAST:event_bBuscarEstudantesActionPerformed

    public void launch(String cpf, Autoridade callerType) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaTurmasProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaTurmasProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaTurmasProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaTurmasProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        setCpf(cpf);
        setCallerType(callerType);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscarEstudantes;
    private javax.swing.JButton bBuscarProfessores;
    private javax.swing.JButton bBuscarTurmas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable tabelaProfessores;
    private javax.swing.JTable tabelaTurmas;
    // End of variables declaration//GEN-END:variables
    private Autoridade callerType;
    private String cpf;

    private DefaultTableModel getTabelaProfessores() {
        return (DefaultTableModel) tabelaProfessores.getModel();
    }

    private void setRowTabelaProfessores(Object[] prof) {
        getTabelaProfessores().addRow(prof);
    }

    private DefaultTableModel getTabelaTurmas() {
        return (DefaultTableModel) tabelaTurmas.getModel();
    }

    private void setRowTabelaTurmas(Object[] turma) {
        getTabelaTurmas().addRow(turma);
    }

    private DefaultTableModel getTabelaEstudantes() {
        return (DefaultTableModel) jTable2.getModel();
    }

    private void setRowTabelaEstudantes(Object[] estudante) {
        getTabelaEstudantes().addRow(estudante);
    }

    public String getCpf() {
        return cpf;
    }

    public void setCpf(String cpf) {
        this.cpf = cpf;
    }

    private void setCallerType(Autoridade callerType) {
        this.callerType = callerType;
    }

    private Autoridade getCallerType() {
        return callerType;
    }
}

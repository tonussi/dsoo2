package br.ufsc.ui;

import br.ufsc.control.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

public class TurmaForm extends javax.swing.JFrame {

    /**
     * Creates new form TurmaForm
     */
    public TurmaForm() {
        initComponents();
        setTabelaBlocoHorarios();
        setNiveis();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bAdicionarTurma = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProfessoresDisponiveis = new JTable(new DefaultTableModel());
        jScrollPane5 = new javax.swing.JScrollPane();
        listaIdiomasDisponiveis = new JList<String>(new DefaultListModel<String>());
        jLabel5 = new javax.swing.JLabel();
        bBuscarProfessores = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaNiveis = new JList<String>(new DefaultListModel<String>());
        bWhatDiasSemana = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaBlocoHorarios = new JTable(new DefaultTableModel());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nova Turma");
        setResizable(false);

        bAdicionarTurma.setText("Submeter");
        bAdicionarTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAdicionarTurmaActionPerformed(evt);
            }
        });

        jLabel1.setText("Nível");

        jLabel2.setText("Blocos de Horários");

        jLabel4.setText("Professores (as)");

        tabelaProfessoresDisponiveis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "NOME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProfessoresDisponiveis.getTableHeader().setReorderingAllowed(false);
        tabelaProfessoresDisponiveis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabelaProfessoresDisponiveisMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaProfessoresDisponiveis);

        listaIdiomasDisponiveis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(listaIdiomasDisponiveis);

        jLabel5.setText("Idiomas");

        bBuscarProfessores.setText("Buscar Professores");
        bBuscarProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarProfessoresActionPerformed(evt);
            }
        });

        listaNiveis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listaNiveis);

        bWhatDiasSemana.setText("?");
        bWhatDiasSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWhatDiasSemanaActionPerformed(evt);
            }
        });

        jLabel7.setText("Busque os professores, e selecione os itens de cada tabela para construir o formulário. Após, submeta o formulário.");

        tabelaBlocoHorarios.setAutoCreateRowSorter(true);
        tabelaBlocoHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dia Semana", "Horário Inicial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaBlocoHorarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelaBlocoHorarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tabelaBlocoHorarios);
        if (tabelaBlocoHorarios.getColumnModel().getColumnCount() > 0) {
            tabelaBlocoHorarios.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bBuscarProfessores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bWhatDiasSemana)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)))
                            .addComponent(bAdicionarTurma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bWhatDiasSemana, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBuscarProfessores, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(bAdicionarTurma, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAdicionarTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAdicionarTurmaActionPerformed
        AdministradorController ac = new AdministradorController();

        boolean check = false;
        try {
            check = ac.adicionarNovaTurma(
                    getCpfProfessor(),
                    getIdiomaDisponivel(),
                    tabelaBlocoHorarios,
                    getNivel()
            );
        } catch (Exception ex) {
            new Mensagem("Não foi possível criar uma turma com esses "
                    + "parâmetros. É possível que essa turma já exista.\n"
                    + "Erro: \n" + ex.toString()).launch();
        }

        if (check) {
            dispose();
        } else {
            new Mensagem("Ocorreram problemas ao submeter este formulário.\n"
                    + "Por favor, revise os parâmetros...\n"
                    + "Lembrar de selecionar todos os campos.").launch();
        }
    }//GEN-LAST:event_bAdicionarTurmaActionPerformed

    private void bBuscarProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarProfessoresActionPerformed
        ProfessorController pc = new ProfessorController();
        ArrayList<String[]> professores = pc.getProfessores();
        getTabelaProfessores().getDataVector().removeAllElements();
        getTabelaProfessores().fireTableDataChanged();
        for (String[] professor : professores) {
            setRowAtTabelaProfessores(professor);
        }
        pc = null;
    }//GEN-LAST:event_bBuscarProfessoresActionPerformed

    private void tabelaProfessoresDisponiveisMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProfessoresDisponiveisMousePressed
        int row = tabelaProfessoresDisponiveis.getSelectedRow();
        if (row > -1) {
            tabelaProfessoresDisponiveis.setRowSelectionInterval(row, row);
            String cpf = getTabelaProfessores().getValueAt(row, 0).toString();
            ProfessorController pc = new ProfessorController();
            getListaIdiomasDisponiveis().clear();
            for (String nome : pc.getIdiomasProfessorByCpf(cpf)) {
                getListaIdiomasDisponiveis().addElement(nome);
            }
        }
    }//GEN-LAST:event_tabelaProfessoresDisponiveisMousePressed

    private void bWhatDiasSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWhatDiasSemanaActionPerformed
        new Mensagem("Selecione algum dia da semana.\n"
                + "1 2 3 4 5 6 correspondem à\n"
                + "segunda terça quarta quinta sexta sábado\n"
                + "respectivamente.").launch();
    }//GEN-LAST:event_bWhatDiasSemanaActionPerformed

//    private void setAutomaticSelectionHoraFinal() {
//        DefaultListModel aux = getListaHorarioInicialTurma();
//        int sindex = listaHorarioInicialTurma.getSelectedIndex();
//        int sindex2 = listaHorarioFinalTurma.getSelectedIndex();
//        int nroAulas = sliderAulas.getValue() - 1;
//        if (sindex > -1) {
//            if (sindex <= aux.getSize() - nroAulas) {
//                listaHorarioFinalTurma.setSelectedIndex(sindex + nroAulas);
//            }
//
//            if (sindex2 > sindex) {
//                listaHorarioFinalTurma.setSelectedIndex(sindex + nroAulas);
//            }
//        }
//    }
    public String getCpfProfessor() {
        DefaultTableModel aux = getTabelaProfessoresDisponiveis();
        return (String) aux.getValueAt(tabelaProfessoresDisponiveis.getSelectedRow(), 0);
    }

    public String getIdiomaDisponivel() {
        DefaultListModel aux = (DefaultListModel) listaIdiomasDisponiveis.getModel();
        int sindex = listaIdiomasDisponiveis.getSelectedIndex();
        if (sindex > -1) {
            return (String) aux.getElementAt(sindex);
        } else {
            new Mensagem("Selecione algum idioma.").launch();
        }
        return null;
    }

//    public String getHoraInicial() {
//        DefaultListModel aux = getListaHorarioInicialTurma();
//        int sindex = listaHorarioInicialTurma.getSelectedIndex();
//        if (sindex > -1) {
//            return (String) aux.getElementAt(sindex);
//        } else {
//            new Mensagem("Selecione algum horário inicial.").launch();
//        }
//        return null;
//    }
//    public String getHoraFinal() {
//        DefaultListModel aux = getListaHorarioInicialTurma();
//        int sindex = listaHorarioInicialTurma.getSelectedIndex();
//        int sindex2 = listaHorarioFinalTurma.getSelectedIndex();
//        int nroAulas = sliderAulas.getValue() - 1;
//        if (sindex > -1) {
//            if (sindex <= aux.getSize() - nroAulas) {
//                return (String) getListaHorarioFinalTurma().getElementAt(sindex + nroAulas);
//            }
//
//            if (sindex2 > sindex) {
//                return (String) getListaHorarioFinalTurma().getElementAt(sindex + nroAulas);
//            }
//        }
//        new Mensagem("Selecione algum horário inicial.").launch();
//        return null;
//    }
    public Integer getNivel() {
        int sindex = listaNiveis.getSelectedIndex();
        if (sindex > -1) {
            return Integer.valueOf((String) (getListaNiveis().getElementAt(sindex)));
        } else {
            new Mensagem("Selecione algum nível.").launch();
        }
        return null;
    }

//    public Integer getDiaSemana() {
//        int sindex = listaDias.getSelectedIndex();
//        if (sindex > -1) {
//            return Integer.valueOf((String) (getListaDias().getElementAt(sindex)));
//        } else {
//            new Mensagem("Selecione algum dia da semana.\n"
//                    + "1 2 3 4 5 6 correspondem à\n"
//                    + "segunda terça quarta quinta sexta sábado\n"
//                    + "respectivamente.").launch();
//        }
//        return null;
//    }

    /**
     * @param args the command line arguments
     */
    public void launch() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TurmaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TurmaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TurmaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TurmaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdicionarTurma;
    private javax.swing.JButton bBuscarProfessores;
    private javax.swing.JButton bWhatDiasSemana;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<String> listaIdiomasDisponiveis;
    private javax.swing.JList<String> listaNiveis;
    private javax.swing.JTable tabelaBlocoHorarios;
    private javax.swing.JTable tabelaProfessoresDisponiveis;
    // End of variables declaration//GEN-END:variables
    private String[] niveis;

//    private void setHoras() {
//        horas = new String[]{
//            "07:30", "08:20", "09:10", "10:10", "11:00", "11:50", "13:30",
//            "14:20", "15:10", "16:20", "17:10", "18:00", "18:30", "19:20",
//            "20:20", "21:10", "22:00"
//        };
//
//        for (int i = 0; i < horas.length; i++) {
//            String hora = horas[i];
//
//            if (i < horas.length - 1) {
//                getListaHorarioInicialTurma().addElement(hora);
//            }
//
//            if (i > 0) {
//                getListaHorarioFinalTurma().addElement(hora);
//            }
//        }
//
//        listaHorarioInicialTurma.setSelectedIndex(0);
//        setAutomaticSelectionHoraFinal();
//    }
    private void setNiveis() {
        niveis = new String[]{
            "1", "2", "3", "4", "5"
        };

        for (String nivel : niveis) {
            getListaNiveis().addElement(nivel);
        }
    }

//    private void setDias() {
//        dias = new String[]{
//            "1", "2", "3", "4", "5", "6"
//        };
//
//        for (String dia : dias) {
//            getListaDias().addElement(dia);
//        }
//    }

    private DefaultTableModel getTabelaProfessores() {
        return (DefaultTableModel) tabelaProfessoresDisponiveis.getModel();
    }

    private void setRowAtTabelaProfessores(Object[] professor) {
        getTabelaProfessores().addRow(professor);
    }

    private DefaultListModel getListaIdiomasDisponiveis() {
        return (DefaultListModel) listaIdiomasDisponiveis.getModel();
    }

//    private DefaultListModel getListaHorarioInicialTurma() {
//        return (DefaultListModel) listaHorarioInicialTurma.getModel();
//    }
    private DefaultTableModel getTabelaProfessoresDisponiveis() {
        return (DefaultTableModel) tabelaProfessoresDisponiveis.getModel();

    }

//    private DefaultListModel getListaDias() {
//        return (DefaultListModel) listaDias.getModel();
//    }

    private DefaultListModel getListaNiveis() {
        return (DefaultListModel) listaNiveis.getModel();
    }

//    private DefaultListModel getListaHorarioFinalTurma() {
//        return (DefaultListModel) listaHorarioFinalTurma.getModel();
//    }
    private DefaultTableModel getTabelaBlocoHorarios() {
        return (DefaultTableModel) tabelaBlocoHorarios.getModel();
    }

    private void setTabelaBlocoHorarios() {
        HorarioController hc = new HorarioController();
        ArrayList<String[]> horarios = hc.getBlocosDisponíveis();
        for (String[] horario : horarios) {
            getTabelaBlocoHorarios().addRow(horario);
        }
        tabelaBlocoHorarios.setAutoCreateRowSorter(true);
    }
}

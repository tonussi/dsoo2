package br.ufsc.ui;

import br.ufsc.control.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

public class AvaliacaoForm extends javax.swing.JFrame {

    int COLUNA_APROVACAO = 2;
    int COLUNA_REPROVACAO = 3;

    /**
     * Creates new form AvaliacaoForm
     */
    public AvaliacaoForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaEstudanteSendoAvaliados = new JTable(new DefaultTableModel());
        bSubmeterAvaliacao = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bAprovarEstudantes = new javax.swing.JButton();
        bLimparTudo = new javax.swing.JButton();
        labelTurmaInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Avaliação dos Estudantes");
        setResizable(false);

        tabelaEstudanteSendoAvaliados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF", "Aprovado", "Reprovado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEstudanteSendoAvaliados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaEstudanteSendoAvaliados);

        bSubmeterAvaliacao.setText("Submeter Avaliação");
        bSubmeterAvaliacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmeterAvaliacaoActionPerformed(evt);
            }
        });

        jLabel1.setText("Selecione os aprovados e pressione o botão APROVAR. O sistema vai mudar o estado dos não selecionados para reprovados.");

        bAprovarEstudantes.setText("Aprovar Selecionados (as)");
        bAprovarEstudantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAprovarEstudantesActionPerformed(evt);
            }
        });

        bLimparTudo.setText("Limpar Tudo");
        bLimparTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimparTudoActionPerformed(evt);
            }
        });

        labelTurmaInfo.setText("Turma");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bAprovarEstudantes, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bLimparTudo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bSubmeterAvaliacao, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(labelTurmaInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTurmaInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSubmeterAvaliacao)
                    .addComponent(bAprovarEstudantes)
                    .addComponent(bLimparTudo))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("avaliacaoEstudantes");
        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSubmeterAvaliacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmeterAvaliacaoActionPerformed
        if (getTabelaEstudanteSendoAvaliados().getDataVector().isEmpty()) {
            new Mensagem("Não existem alunos (as) para serem avaliados.").launch();
            return;
        }

        int dialogButton = 0;
        int dialogResult = JOptionPane.showConfirmDialog(bSubmeterAvaliacao,
                "Fechar Turma? Essa Operação Vai Fechar A Turma E Avaliar "
                + "Os Estudantes.", "Warning", dialogButton);

        ProfessorController pc = new ProfessorController();
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                
                boolean check = pc.avaliar(
                        getIdTurma(),
                        getNomeIdioma(),
                        getNivel(),
                        getCpfProfessor(),
                        getTabelaEstudanteSendoAvaliados()
                );
                
                if (check) {
                    dispose();
                } else {
                    new Mensagem("Não foi possível terminar a operação conjunta de "
                            + "avaliar e fechar. Preencha todos os campos. "
                            + "Revise o formulário.").launch();
                }
            } catch (Exception ex) {
                    new Mensagem(ex.toString()).launch();
            }
        }
        pc = null;
    }//GEN-LAST:event_bSubmeterAvaliacaoActionPerformed

    private void bAprovarEstudantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAprovarEstudantesActionPerformed
        for (int rindex = 0; rindex < getTabelaEstudanteSendoAvaliados().getRowCount(); rindex++) {
            if (tabelaEstudanteSendoAvaliados.isRowSelected(rindex)) {
                getTabelaEstudanteSendoAvaliados().setValueAt(true, rindex, COLUNA_APROVACAO);
            } else {
                getTabelaEstudanteSendoAvaliados().setValueAt(true, rindex, COLUNA_REPROVACAO);
            }
        }
    }//GEN-LAST:event_bAprovarEstudantesActionPerformed

    private void bLimparTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimparTudoActionPerformed
        for (int rindex = 0; rindex < getTabelaEstudanteSendoAvaliados().getRowCount(); rindex++) {
            tabelaEstudanteSendoAvaliados.setRowSelectionInterval(rindex, rindex);
            getTabelaEstudanteSendoAvaliados().setValueAt(false, rindex, COLUNA_APROVACAO);
            getTabelaEstudanteSendoAvaliados().setValueAt(false, rindex, COLUNA_REPROVACAO);
        }
    }//GEN-LAST:event_bLimparTudoActionPerformed

    public void launch(Integer id, String nomeIdioma, Integer nivel, String cpfProfessor) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvaliacaoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvaliacaoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvaliacaoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvaliacaoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        setIdTurma(id);
        setNomeIdioma(nomeIdioma);
        setNivel(nivel);
        setCpfProfessor(cpfProfessor);
        setTabelaEstudanteAvaliados();
        labelTurmaInfo.setText("Idioma: " + nomeIdioma + ", Nível: " + nivel
                + ", CPF Professor: " + cpfProfessor + ".");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAprovarEstudantes;
    private javax.swing.JButton bLimparTudo;
    private javax.swing.JButton bSubmeterAvaliacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTurmaInfo;
    private javax.swing.JTable tabelaEstudanteSendoAvaliados;
    // End of variables declaration//GEN-END:variables

    private Integer idTurma;
    private String nomeIdioma;
    private Integer nivel;
    private String cpfProfessor;

    public String getCpfProfessor() {
        return cpfProfessor;
    }

    public void setCpfProfessor(String cpfProfessor) {
        this.cpfProfessor = cpfProfessor;
    }

    public Integer getNivel() {
        return nivel;
    }

    public void setNivel(Integer nivel) {
        this.nivel = nivel;
    }

    public String getNomeIdioma() {
        return nomeIdioma;
    }

    public void setNomeIdioma(String nomeIdioma) {
        this.nomeIdioma = nomeIdioma;
    }

    public Integer getIdTurma() {
        return idTurma;
    }

    public void setIdTurma(Integer idTurma) {
        this.idTurma = idTurma;
    }

    private void setTabelaEstudanteAvaliados() {
        MatriculaController mc = new MatriculaController();
        ArrayList<String[]> estudantes;
        estudantes = mc.getEstudantesMatriculadosEmTurma(getIdTurma(),
                getNomeIdioma(),
                getNivel(),
                getCpfProfessor()
        );

        if (estudantes != null && estudantes.size() > 0) {
            getTabelaEstudanteSendoAvaliados().getDataVector().removeAllElements();
            getTabelaEstudanteSendoAvaliados().fireTableDataChanged();
            for (String[] estudante : estudantes) {
                setRowAtTabelaEstudanteSendoAvaliados(estudante);
            }
        }
        mc = null;
    }

    private DefaultTableModel getTabelaEstudanteSendoAvaliados() {
        return (DefaultTableModel) tabelaEstudanteSendoAvaliados.getModel();
    }

    private void setRowAtTabelaEstudanteSendoAvaliados(Object[] estudante) {
        getTabelaEstudanteSendoAvaliados().addRow(estudante);
    }

}
